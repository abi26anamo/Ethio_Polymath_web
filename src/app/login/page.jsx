"use client";
import { useState, useEffect } from "react";
import Head from "next/head";
import validator from "validator";
// import { login } from "../../utils/auth";
import Link from "next/link";
import { useRouter } from "next/navigation";
import Popup from "@/componenets/Popup";
import { useDispatch } from "react-redux";
import { login } from "@/redux/features/auth/authSlice";
import { useSelector } from "react-redux";
import { Poppins } from "next/font/google";
import LoadingIndicator from "@/componenets/LoadingIndicator";

// const loginCred = {
//   email: "test@example.com",
//   password: "pwd123",
// };

const poppins400 = Poppins({
  weight: ["400"],
  subsets: ["latin"],
});

const poppins600 = Poppins({
  weight: ["600"],
  subsets: ["latin"],
});

const Login = () => {
  const dispatch = useDispatch();
  const router = useRouter();
  const [inputValue, setInputValue] = useState({
    email: "",
    password: "",
  });

  const { email, password } = inputValue;
  const [rememberMe, setRememberMe] = useState(false);
  const [emailError, setEmailError] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState("");

  const { user, isLoading,isLoggedIn } = useSelector((state) => state.auth);

  useEffect(() => {
    if (user) {
      router.push("/admin/dashboard/video-management");
    } 
  }, [user, router]);


  const onChange = (e) => {
    setError("");
    const { name, value } = e.target;
    setInputValue((prev) => ({
      ...prev,
      [name]: value,
    }));
  };
  const handleRememberMeChange = () => {
    setRememberMe(!rememberMe);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // console.log(inputValue, rememberMe)

    if (email.trim().length === 0) {
      setError("Email is required");
    } else if (!validator.isEmail(email)) {
      setError("Please enter a valid email address");
    } else if (password.length === 0) {
      setError("Password is required");
    } else {
      console.log("CALLED");
      dispatch(login(inputValue));
      // if (email === loginCred.email && password === loginCred.password) {
      //     console.log("Login Successful");
      //     router.push('/admin/dashboard/video-management')
      // } else {
      //     setError("Invalid credentials!");
      // }
    }
  };

  // const handleLogin = () => {
  //     login(email, password, rememberMe);
  // };

  const [showPopup, setShowPopup] = useState(false);
  const togglePopup = () => {
    setShowPopup(!showPopup);
  };

  return (
  <>
    {isLoading && !isLoggedIn && <LoadingIndicator />}
    {!isLoading && !isLoggedIn && ( <div>
      <Head>
        <title>Login - Polymath</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/assets/logo.svg" type="image/svg+xml" />
      </Head>
      
        <div className="flex items-center justify-center px-4 py-40 sm:px-6 lg:px-8">
          <div className="max-w-md sm:max-w-lg w-full space-y-8">
            <div className="flex flex-col gap-4 items-start">
              <h1
                className={`"${poppins600.className} text-5xl font-[600] leading-[32px]"`}
              >
                Welcome
              </h1>
              <p className={`${poppins400.className} text-base text-gray-500`}>
                Please enter your Email and Password below.
              </p>
            </div>
            <form onSubmit={handleSubmit} className="space-y-4" noValidate>
              <div>
                <input
                  type="email"
                  id="email"
                  name="email"
                  autoComplete="none"
                  value={email}
                  onChange={onChange}
                  className="w-full py-4 px-4 text-sm text-gray-700 placeholder-[#c4c4c4] border border-[#c4c4c4] rounded-lg focus:outline-none focus:border-[#ff5e7c] focus:ring-0"
                  placeholder="Email"
                />
                {submitted && emailError && (
                  <p className="text-red-500 text-xs italic">{emailError}</p>
                )}
              </div>
              <div>
                <input
                  type="password"
                  id="password"
                  name="password"
                  autoComplete="none"
                  value={password}
                  onChange={onChange}
                  className="w-full py-4 px-4 text-sm text-gray-700 placeholder-[#c4c4c4] border border-[#c4c4c4] rounded-lg focus:outline-none focus:border-[#ff5e7c] focus:ring-0"
                  placeholder="Password"
                />
                {submitted && passwordError && (
                  <p className="text-red-500 text-xs italic">{passwordError}</p>
                )}
              </div>
              <div className="flex justify-end">
                <Link
                  href="/register"
                  className={`"${poppins400.className} text-[#FC7B92] hover:underline text-sm"`}
                >
                  Register
                </Link>
              </div>
              <div className="space-y-4">
                <div>
                  {error && error.length > 0 && (
                    <p className="my-2 text-red-500 text-sm text-center">
                      {error}
                    </p>
                  )}
                  <button
                    type="submit"
                    onClick={handleSubmit}
                    className={`"${poppins400.className} w-full px-6 py-4 text-sm font-medium text-white bg-[#ff5e7c] rounded-full hover:bg-[#ff5574] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-200"`}
                  >
                    Sign in
                  </button>
                </div>
                <div className="flex">
                  <button
                    // href="/waitlist"
                    onClick={togglePopup}
                    className={`
                    "${poppins400.className} w-full px-6 py-4 text-sm font-medium border border-[#e5e5e5] text-[#c4c4c4] hover:bg-[#2e2e2e] hover:text-white transition-all bg-transparent rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-200 text-center"
                  `}
                  >
                    Join the Waitlist
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      
      {showPopup && <Popup onClose={togglePopup} />}
      </div>)}
      </>
  );
};

export default Login;
